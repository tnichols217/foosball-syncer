import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library'
import dotenv from "dotenv"
import { UsersRowData, VerifiedInputs } from "./index/parsedRow"
import { PeoplePointBucket, PeoplePointData, PointData } from "./index/pointData"
let env = dotenv.config().parsed as any

const SPREADSHEET = "1ajVhu1WlCYArATAQM2suTGiz1PKv6PIXSUqJBT5e_hM"

const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email:  env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    key: env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
    scopes: [
        'https://www.googleapis.com/auth/spreadsheets',
    ],
});

const springForceWeight = (point: PointData, distance: number): number => {
    //TODO: calculates force exerted upon other points based on pointdata and distance
    //!

    return 0
}

const doc = new GoogleSpreadsheet(SPREADSHEET, serviceAccountAuth);
doc.loadInfo().then(async () => {
    const sheet = doc.sheetsByIndex[0];
    const userRows = await sheet.getRows<UsersRowData>();
    const verifiedInputs = VerifiedInputs.fromUsersRowData(userRows.map(row => row.toObject() as UsersRowData))
    const pointData = verifiedInputs.rows.map(input => PeoplePointData.fromGame(input))
    const bucketPairs = new PeoplePointBucket(pointData)

    console.log(bucketPairs);
});
